// app/user/search/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { Search, Filter, MapPin, Calendar, Star } from 'lucide-react'
import styles from './search.module.css'

interface Equipment {
  id: string
  name: string
  category: string
  description: string
  location: string
  status: 'available' | 'borrowed' | 'maintenance'
  rating: number
  image?: string
  borrowedUntil?: string
  features?: string[]
}

export default function SearchPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [selectedLocation, setSelectedLocation] = useState('all')
  const [selectedStatus, setSelectedStatus] = useState('all')
  const [equipment, setEquipment] = useState<Equipment[]>([])
  const [loading, setLoading] = useState(true)

  // Mock data
  const mockEquipment: Equipment[] = [
    {
      id: 'EQ001',
      name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï OMRON',
      category: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î',
      description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥',
      location: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à A',
      status: 'available',
      rating: 4.8,
      image: '/images/blood-pressure.jpg',
      features: ['‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á', '‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ']
    },
    {
      id: 'EQ002', 
      name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î',
      category: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î',
      description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß',
      location: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à A',
      status: 'borrowed',
      rating: 4.6,
      borrowedUntil: '2025-01-25',
      features: ['‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß', '‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ô‡πâ‡∏≠‡∏¢', '‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥']
    },
    {
      id: 'EQ003',
      name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á Ultrasound ‡∏û‡∏Å‡∏û‡∏≤',
      category: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢',
      description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏ï‡∏£‡∏≤‡∏ã‡∏≤‡∏ß‡∏î‡πå‡∏û‡∏Å‡∏û‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏π‡∏á',
      location: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à B',
      status: 'available',
      rating: 4.9,
      features: ['‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á', '‡∏û‡∏Å‡∏û‡∏≤‡∏™‡∏∞‡∏î‡∏ß‡∏Å', '‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô']
    },
    {
      id: 'EQ004',
      name: '‡∏ä‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏π‡∏Ñ‡∏≠‡∏à‡∏°‡∏π‡∏Å',
      category: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏≤‡∏≠‡∏≤‡∏£‡πå‡∏Å',
      description: '‡∏ä‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏π‡∏Ñ‡∏≠‡∏à‡∏°‡∏π‡∏Å‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°',
      location: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à C',
      status: 'maintenance',
      rating: 4.7,
      features: ['‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô', '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ', '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏á‡πà‡∏≤‡∏¢']
    }
  ]

  const categories = [
    { value: 'all', label: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' },
    { value: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î', label: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î' },
    { value: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢', label: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢' },
    { value: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏≤‡∏≠‡∏≤‡∏£‡πå‡∏Å', label: '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏≤‡∏≠‡∏≤‡∏£‡πå‡∏Å' }
  ]

  const locations = [
    { value: 'all', label: '‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà' },
    { value: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à A', label: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à A' },
    { value: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à B', label: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à B' },
    { value: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à C', label: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à C' }
  ]

  const statuses = [
    { value: 'all', label: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' },
    { value: 'available', label: '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' },
    { value: 'borrowed', label: '‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°' },
    { value: 'maintenance', label: '‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤' }
  ]

  useEffect(() => {
    setLoading(true)
    setTimeout(() => {
      setEquipment(mockEquipment)
      setLoading(false)
    }, 1000)
  }, [])

  const filteredEquipment = equipment.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = selectedCategory === 'all' || item.category === selectedCategory
    const matchesLocation = selectedLocation === 'all' || item.location === selectedLocation
    const matchesStatus = selectedStatus === 'all' || item.status === selectedStatus

    return matchesSearch && matchesCategory && matchesLocation && matchesStatus
  })

  const getStatusBadge = (status: string, borrowedUntil?: string) => {
    switch (status) {
      case 'available':
        return <span className={styles.statusAvailable}>‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</span>
      case 'borrowed':
        return (
          <span className={styles.statusBorrowed}>
            ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏° {borrowedUntil && `‡∏ñ‡∏∂‡∏á ${borrowedUntil}`}
          </span>
        )
      case 'maintenance':
        return <span className={styles.statusMaintenance}>‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤</span>
      default:
        return null
    }
  }

  const getStatusClass = (status: string) => {
    switch (status) {
      case 'available': return styles.cardAvailable
      case 'borrowed': return styles.cardBorrowed
      case 'maintenance': return styles.cardMaintenance
      default: return ''
    }
  }

  if (loading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.loadingSpinner}></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...</p>
      </div>
    )
  }

  return (
    <div className={styles.searchPage}>
      <div className={styles.pageHeader}>
        <h1 className={styles.pageTitle}>
          <Search size={32} />
          ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        </h1>
        <p className={styles.pageSubtitle}>
          ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        </p>
      </div>

      <div className={styles.searchSection}>
        <div className={styles.searchContainer}>
          <div className={styles.searchBox}>
            <Search size={20} className={styles.searchIcon} />
            <input
              type="text"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={styles.searchInput}
            />
          </div>
        </div>

        <div className={styles.filtersContainer}>
          <div className={styles.filterGroup}>
            <Filter size={18} />
            <span>‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á:</span>
          </div>
          
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className={styles.filterSelect}
          >
            {categories.map(category => (
              <option key={category.value} value={category.value}>
                {category.label}
              </option>
            ))}
          </select>

          <select
            value={selectedLocation}
            onChange={(e) => setSelectedLocation(e.target.value)}
            className={styles.filterSelect}
          >
            {locations.map(location => (
              <option key={location.value} value={location.value}>
                {location.label}
              </option>
            ))}
          </select>

          <select
            value={selectedStatus}
            onChange={(e) => setSelectedStatus(e.target.value)}
            className={styles.filterSelect}
          >
            {statuses.map(status => (
              <option key={status.value} value={status.value}>
                {status.label}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className={styles.resultsSection}>
        <div className={styles.resultsHeader}>
          <h2>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ({filteredEquipment.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</h2>
        </div>

        {filteredEquipment.length === 0 ? (
          <div className={styles.noResults}>
            <Search size={48} />
            <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h3>
            <p>‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</p>
          </div>
        ) : (
          <div className={styles.equipmentGrid}>
            {filteredEquipment.map(item => (
              <div key={item.id} className={`${styles.equipmentCard} ${getStatusClass(item.status)}`}>
                <div className={styles.cardHeader}>
                  <div className={styles.cardImage}>
                    <div className={styles.imagePlaceholder}>
                      üì¶
                    </div>
                  </div>
                  <div className={styles.cardRating}>
                    <Star size={14} fill="currentColor" />
                    {item.rating}
                  </div>
                </div>

                <div className={styles.cardContent}>
                  <h3 className={styles.cardTitle}>{item.name}</h3>
                  <p className={styles.cardId}>{item.id}</p>
                  <p className={styles.cardCategory}>{item.category}</p>
                  <p className={styles.cardDescription}>{item.description}</p>
                  
                  <div className={styles.cardLocation}>
                    <MapPin size={14} />
                    {item.location}
                  </div>

                  {item.features && (
                    <div className={styles.cardFeatures}>
                      {item.features.map((feature, index) => (
                        <span key={index} className={styles.featureTag}>
                          {feature}
                        </span>
                      ))}
                    </div>
                  )}
                </div>

                <div className={styles.cardFooter}>
                  {getStatusBadge(item.status, item.borrowedUntil)}
                  
                  <div className={styles.cardActions}>
                    {item.status === 'available' ? (
                      <>
                        <button className={styles.borrowBtn}>
                          ‡∏¢‡∏∑‡∏°‡πÄ‡∏•‡∏¢
                        </button>
                        <button className={styles.bookBtn}>
                          <Calendar size={16} />
                          ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
                        </button>
                      </>
                    ) : item.status === 'borrowed' ? (
                      <button className={styles.waitBtn}>
                        <Calendar size={16} />
                        ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß
                      </button>
                    ) : (
                      <button className={styles.disabledBtn} disabled>
                        ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}