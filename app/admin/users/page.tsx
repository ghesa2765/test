// app/admin/users/page.tsx
'use client'

import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { 
  Plus, 
  Search, 
  Filter, 
  MoreHorizontal, 
  Edit, 
  Trash2, 
  Eye,
  Download,
  Upload,
  UserCheck,
  UserX,
  Mail,
  Phone,
  Shield,
  User
} from 'lucide-react'
import styles from '@/styles/pages/admin-users.module.css'

interface UserData {
  id: string
  username: string
  email: string
  firstName: string
  lastName: string
  role: 'ADMIN' | 'STAFF' | 'USER'
  department: string
  position: string
  phone?: string
  isActive: boolean
  isVerified: boolean
  lastLogin?: string
  totalBookings: number
  activeBookings: number
  createdAt: string
}

// Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const mockUsers: UserData[] = [
  {
    id: '1',
    username: 'admin',
    email: 'admin@rsu.ac.th',
    firstName: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•',
    lastName: '‡∏£‡∏∞‡∏ö‡∏ö',
    role: 'ADMIN',
    department: 'IT',
    position: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
    phone: '02-997-2200',
    isActive: true,
    isVerified: true,
    lastLogin: '2024-01-26 08:30:00',
    totalBookings: 0,
    activeBookings: 0,
    createdAt: '2024-01-01'
  },
  {
    id: '2',
    username: 'doctor1',
    email: 'doctor1@rsu.ac.th',
    firstName: '‡∏ô‡∏û.‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
    lastName: '‡πÉ‡∏à‡∏î‡∏µ',
    role: 'USER',
    department: '‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°',
    position: '‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥',
    phone: '02-997-2201',
    isActive: true,
    isVerified: true,
    lastLogin: '2024-01-25 16:45:00',
    totalBookings: 45,
    activeBookings: 2,
    createdAt: '2024-01-05'
  },
  {
    id: '3',
    username: 'nurse1',
    email: 'nurse1@rsu.ac.th',
    firstName: '‡∏û‡∏¢.‡∏™‡∏∏‡∏î‡∏≤',
    lastName: '‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à',
    role: 'USER',
    department: '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
    position: '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û',
    phone: '02-997-2202',
    isActive: true,
    isVerified: true,
    lastLogin: '2024-01-26 07:15:00',
    totalBookings: 67,
    activeBookings: 1,
    createdAt: '2024-01-03'
  },
  {
    id: '4',
    username: 'staff1',
    email: 'staff1@rsu.ac.th',
    firstName: '‡∏ß‡∏¥‡πÑ‡∏•',
    lastName: '‡∏°‡∏≤‡∏ô‡∏∞‡∏î‡∏µ',
    role: 'USER',
    department: '‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î',
    position: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î',
    phone: '02-997-2203',
    isActive: true,
    isVerified: true,
    lastLogin: '2024-01-24 14:30:00',
    totalBookings: 23,
    activeBookings: 0,
    createdAt: '2024-01-08'
  },
  {
    id: '5',
    username: 'student1',
    email: 'student1@rsu.ac.th',
    firstName: '‡∏ô‡∏¥‡∏Ñ‡∏°',
    lastName: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡∏µ',
    role: 'USER',
    department: '‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
    position: '‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå',
    phone: '02-997-2204',
    isActive: true,
    isVerified: false,
    lastLogin: '2024-01-22 10:00:00',
    totalBookings: 12,
    activeBookings: 1,
    createdAt: '2024-01-15'
  },
  {
    id: '6',
    username: 'intern1',
    email: 'intern1@rsu.ac.th',
    firstName: '‡∏™‡∏°‡πÉ‡∏à',
    lastName: '‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    role: 'USER',
    department: '‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°',
    position: '‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î',
    phone: '02-997-2205',
    isActive: false,
    isVerified: true,
    lastLogin: '2024-01-10 09:30:00',
    totalBookings: 8,
    activeBookings: 0,
    createdAt: '2024-01-12'
  }
]

const roles = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'ADMIN', 'STAFF', 'USER']
const departments = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'IT', '‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°', '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î', '‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå']
const statuses = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'active', 'inactive', 'verified', 'unverified']

export default function UserManagementPage() {
  const [users, setUsers] = useState<UserData[]>(mockUsers)
  const [filteredUsers, setFilteredUsers] = useState<UserData[]>(mockUsers)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedRole, setSelectedRole] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  const [selectedDepartment, setSelectedDepartment] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  const [selectedStatus, setSelectedStatus] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  const [showFilters, setShowFilters] = useState(false)
  const [selectedItems, setSelectedItems] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(false)

  // Filter and search logic
  useEffect(() => {
    let filtered = users

    // Search filter
    if (searchQuery.trim()) {
      filtered = filtered.filter(user =>
        user.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.department.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.position.toLowerCase().includes(searchQuery.toLowerCase())
      )
    }

    // Role filter
    if (selectedRole !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
      filtered = filtered.filter(user => user.role === selectedRole)
    }

    // Department filter
    if (selectedDepartment !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
      filtered = filtered.filter(user => user.department === selectedDepartment)
    }

    // Status filter
    if (selectedStatus !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
      switch (selectedStatus) {
        case 'active':
          filtered = filtered.filter(user => user.isActive)
          break
        case 'inactive':
          filtered = filtered.filter(user => !user.isActive)
          break
        case 'verified':
          filtered = filtered.filter(user => user.isVerified)
          break
        case 'unverified':
          filtered = filtered.filter(user => !user.isVerified)
          break
      }
    }

    setFilteredUsers(filtered)
  }, [users, searchQuery, selectedRole, selectedDepartment, selectedStatus])

  const handleSelectAll = () => {
    if (selectedItems.length === filteredUsers.length) {
      setSelectedItems([])
    } else {
      setSelectedItems(filteredUsers.map(user => user.id))
    }
  }

  const handleSelectItem = (id: string) => {
    setSelectedItems(prev =>
      prev.includes(id)
        ? prev.filter(item => item !== id)
        : [...prev, id]
    )
  }

  const getRoleDisplay = (role: UserData['role']) => {
    const roleMap = {
      'ADMIN': { text: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö', class: 'admin' },
      'STAFF': { text: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', class: 'staff' },
      'USER': { text: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', class: 'user' }
    }
    return roleMap[role]
  }

  const getStatusDisplay = (user: UserData) => {
    if (!user.isActive) return { text: '‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', class: 'inactive' }
    if (!user.isVerified) return { text: '‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', class: 'unverified' }
    return { text: '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', class: 'active' }
  }

  const formatLastLogin = (lastLogin?: string) => {
    if (!lastLogin) return '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
    
    const date = new Date(lastLogin)
    const now = new Date()
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60))
    
    if (diffInHours < 1) return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà'
    if (diffInHours < 24) return `${diffInHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    
    const diffInDays = Math.floor(diffInHours / 24)
    if (diffInDays < 7) return `${diffInDays} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    
    return date.toLocaleDateString('th-TH')
  }

  const handleToggleActive = (id: string) => {
    setUsers(prev => 
      prev.map(user => 
        user.id === id ? { ...user, isActive: !user.isActive } : user
      )
    )
  }

  const handleToggleVerified = (id: string) => {
    setUsers(prev => 
      prev.map(user => 
        user.id === id ? { ...user, isVerified: !user.isVerified } : user
      )
    )
  }

  const handleDelete = (id: string) => {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ?')) {
      setUsers(prev => prev.filter(user => user.id !== id))
      setSelectedItems(prev => prev.filter(item => item !== id))
    }
  }

  const handleBulkAction = (action: string) => {
    console.log(`Bulk action: ${action} on users:`, selectedItems)
    // Implement bulk actions
  }

  const sendResetEmail = (email: string) => {
    console.log(`Sending reset email to: ${email}`)
    // Implement email sending
  }

  return (
    <div className={styles.usersPage}>
      {/* Page Header */}
      <div className={styles.pageHeader}>
        <div className={styles.headerContent}>
          <div className={styles.headerLeft}>
            <h1 className={styles.pageTitle}>üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h1>
            <p className={styles.pageSubtitle}>
              ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö
            </p>
          </div>
          <div className={styles.headerActions}>
            <button className={styles.secondaryButton}>
              <Download size={18} />
              ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
            <button className={styles.secondaryButton}>
              <Upload size={18} />
              ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
            <Link href="/admin/users/add" className={styles.primaryButton}>
              <Plus size={18} />
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
            </Link>
          </div>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className={styles.statsGrid}>
        <div className={styles.statCard}>
          <div className={styles.statIcon}>üë•</div>
          <div className={styles.statContent}>
            <div className={styles.statValue}>{users.length}</div>
            <div className={styles.statLabel}>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
          </div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statIcon}>‚úÖ</div>
          <div className={styles.statContent}>
            <div className={styles.statValue}>
              {users.filter(u => u.isActive).length}
            </div>
            <div className={styles.statLabel}>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ</div>
          </div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statIcon}>üîí</div>
          <div className={styles.statContent}>
            <div className={styles.statValue}>
              {users.filter(u => u.role === 'ADMIN').length}
            </div>
            <div className={styles.statLabel}>‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</div>
          </div>
        </div>
        <div className={styles.statCard}>
          <div className={styles.statIcon}>‚è∞</div>
          <div className={styles.statContent}>
            <div className={styles.statValue}>
              {users.filter(u => u.lastLogin && 
                new Date(u.lastLogin) > new Date(Date.now() - 24 * 60 * 60 * 1000)
              ).length}
            </div>
            <div className={styles.statLabel}>‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className={styles.controlsSection}>
        <div className={styles.searchSection}>
          <div className={styles.searchBox}>
            <Search className={styles.searchIcon} size={20} />
            <input
              type="text"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡πÅ‡∏ú‡∏ô‡∏Å..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className={styles.searchInput}
            />
          </div>
          <button
            className={`${styles.filterButton} ${showFilters ? styles.active : ''}`}
            onClick={() => setShowFilters(!showFilters)}
          >
            <Filter size={18} />
            ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
          </button>
        </div>

        {/* Filters */}
        {showFilters && (
          <div className={styles.filtersSection}>
            <div className={styles.filterGroup}>
              <label>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:</label>
              <select
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                className={styles.filterSelect}
              >
                {roles.map(role => (
                  <option key={role} value={role}>
                    {role === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ? role : getRoleDisplay(role as any)?.text || role}
                  </option>
                ))}
              </select>
            </div>
            <div className={styles.filterGroup}>
              <label>‡πÅ‡∏ú‡∏ô‡∏Å:</label>
              <select
                value={selectedDepartment}
                onChange={(e) => setSelectedDepartment(e.target.value)}
                className={styles.filterSelect}
              >
                {departments.map(dept => (
                  <option key={dept} value={dept}>{dept}</option>
                ))}
              </select>
            </div>
            <div className={styles.filterGroup}>
              <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className={styles.filterSelect}
              >
                <option value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                <option value="active">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ</option>
                <option value="inactive">‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
                <option value="verified">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</option>
                <option value="unverified">‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</option>
              </select>
            </div>
          </div>
        )}

        {/* Bulk Actions */}
        {selectedItems.length > 0 && (
          <div className={styles.bulkActions}>
            <span className={styles.selectedCount}>
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </span>
            <div className={styles.bulkButtons}>
              <button
                className={styles.bulkButton}
                onClick={() => handleBulkAction('activate')}
              >
                ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              </button>
              <button
                className={styles.bulkButton}
                onClick={() => handleBulkAction('deactivate')}
              >
                ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              </button>
              <button
                className={styles.bulkButton}
                onClick={() => handleBulkAction('export')}
              >
                ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
              </button>
              <button
                className={`${styles.bulkButton} ${styles.danger}`}
                onClick={() => handleBulkAction('delete')}
              >
                ‡∏•‡∏ö
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Users Table */}
      <div className={styles.tableContainer}>
        <div className={styles.tableHeader}>
          <div className={styles.tableTitle}>
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ({filteredUsers.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
          </div>
        </div>

        {isLoading ? (
          <div className={styles.loading}>
            <div className={styles.spinner}></div>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
          </div>
        ) : (
          <div className={styles.tableWrapper}>
            <table className={styles.usersTable}>
              <thead>
                <tr>
                  <th className={styles.checkboxHeader}>
                    <input
                      type="checkbox"
                      checked={selectedItems.length === filteredUsers.length && filteredUsers.length > 0}
                      onChange={handleSelectAll}
                      className={styles.checkbox}
                    />
                  </th>
                  <th>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</th>
                  <th>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</th>
                  <th>‡πÅ‡∏ú‡∏ô‡∏Å/‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</th>
                  <th>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.map((user) => {
                  const roleInfo = getRoleDisplay(user.role)
                  const statusInfo = getStatusDisplay(user)
                  
                  return (
                    <tr key={user.id} className={styles.tableRow}>
                      <td>
                        <input
                          type="checkbox"
                          checked={selectedItems.includes(user.id)}
                          onChange={() => handleSelectItem(user.id)}
                          className={styles.checkbox}
                        />
                      </td>
                      <td className={styles.userCell}>
                        <div className={styles.userInfo}>
                          <div className={styles.userAvatar}>
                            {user.role === 'ADMIN' ? 'üëë' : 
                             user.role === 'STAFF' ? 'üëî' : 'üë§'}
                          </div>
                          <div className={styles.userDetails}>
                            <div className={styles.userName}>
                              {user.firstName} {user.lastName}
                            </div>
                            <div className={styles.userUsername}>
                              @{user.username}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td>
                        <span className={`${styles.roleBadge} ${styles[roleInfo.class]}`}>
                          {roleInfo.text}
                        </span>
                      </td>
                      <td className={styles.departmentCell}>
                        <div className={styles.department}>{user.department}</div>
                        <div className={styles.position}>{user.position}</div>
                      </td>
                      <td className={styles.contactCell}>
                        <div className={styles.contactItem}>
                          <Mail size={14} />
                          <span>{user.email}</span>
                        </div>
                        {user.phone && (
                          <div className={styles.contactItem}>
                            <Phone size={14} />
                            <span>{user.phone}</span>
                          </div>
                        )}
                      </td>
                      <td>
                        <div className={styles.statusContainer}>
                          <span className={`${styles.statusBadge} ${styles[statusInfo.class]}`}>
                            {statusInfo.text}
                          </span>
                          <div className={styles.statusIndicators}>
                            {user.isActive && (
                              <span className={styles.indicator} title="‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ">üü¢</span>
                            )}
                            {user.isVerified && (
                              <span className={styles.indicator} title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß">‚úÖ</span>
                            )}
                          </div>
                        </div>
                      </td>
                      <td className={styles.usageCell}>
                        <div className={styles.usageStats}>
                          <div className={styles.statItem}>
                            <span className={styles.statValue}>{user.totalBookings}</span>
                            <span className={styles.statLabel}>‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                          </div>
                          <div className={styles.statItem}>
                            <span className={styles.statValue}>{user.activeBookings}</span>
                            <span className={styles.statLabel}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°</span>
                          </div>
                        </div>
                      </td>
                      <td className={styles.lastLoginCell}>
                        {formatLastLogin(user.lastLogin)}
                      </td>
                      <td>
                        <div className={styles.actions}>
                          <div className={styles.actionGroup}>
                            <Link
                              href={`/admin/users/${user.id}`}
                              className={styles.actionButton}
                              title="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
                            >
                              <Eye size={16} />
                            </Link>
                            <Link
                              href={`/admin/users/edit/${user.id}`}
                              className={styles.actionButton}
                              title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
                            >
                              <Edit size={16} />
                            </Link>
                          </div>
                          <div className={styles.actionGroup}>
                            <button
                              className={`${styles.actionButton} ${user.isActive ? styles.warning : styles.success}`}
                              onClick={() => handleToggleActive(user.id)}
                              title={user.isActive ? '‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                            >
                              {user.isActive ? <UserX size={16} /> : <UserCheck size={16} />}
                            </button>
                            <button
                              className={styles.actionButton}
                              onClick={() => sendResetEmail(user.email)}
                              title="‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                            >
                              <Mail size={16} />
                            </button>
                            <button
                              className={`${styles.actionButton} ${styles.danger}`}
                              onClick={() => handleDelete(user.id)}
                              title="‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                            >
                              <Trash2 size={16} />
                            </button>
                          </div>
                        </div>
                      </td>
                    </tr>
                  )
                })}
              </tbody>
            </table>

            {filteredUsers.length === 0 && (
              <div className={styles.emptyState}>
                <div className={styles.emptyIcon}>üë•</div>
                <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h3>
                <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                <button
                  className={styles.primaryButton}
                  onClick={() => {
                    setSearchQuery('')
                    setSelectedRole('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
                    setSelectedDepartment('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
                    setSelectedStatus('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
                  }}
                >
                  ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}